{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MkDocs For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Welcome to MkDocs"},{"location":"#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"1.%20%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/","text":"\u300c\u529b\u6263\u300d\u7b2c 1 \u9898\uff1a\u4e24\u6570\u4e4b\u548c \u94fe\u63a5 \u9898\u76ee\u63cf\u8ff0 \u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 nums \u548c\u4e00\u4e2a\u6574\u6570\u76ee\u6807\u503c target \uff0c\u8bf7\u4f60\u5728\u8be5\u6570\u7ec4\u4e2d\u627e\u51fa \u548c\u4e3a\u76ee\u6807\u503c target \u7684\u90a3 \u4e24\u4e2a \u6574\u6570\uff0c\u5e76\u8fd4\u56de\u5b83\u4eec\u7684\u6570\u7ec4\u4e0b\u6807\u3002 \u4f60\u53ef\u4ee5\u5047\u8bbe\u6bcf\u79cd\u8f93\u5165\u53ea\u4f1a\u5bf9\u5e94\u4e00\u4e2a\u7b54\u6848\u3002\u4f46\u662f\uff0c\u6570\u7ec4\u4e2d\u540c\u4e00\u4e2a\u5143\u7d20\u5728\u7b54\u6848\u91cc\u4e0d\u80fd\u91cd\u590d\u51fa\u73b0\u3002 \u4f60\u53ef\u4ee5\u6309\u4efb\u610f\u987a\u5e8f\u8fd4\u56de\u7b54\u6848\u3002 \u793a\u4f8b 1\uff1a \u8f93\u5165\uff1a nums = [2,7,11,15], target = 9 \u8f93\u51fa\uff1a [0,1] \u89e3\u91ca\uff1a \u56e0\u4e3a nums[0] + nums[1] == 9 \uff0c\u8fd4\u56de [0, 1] \u3002 \u793a\u4f8b 2\uff1a \u8f93\u5165\uff1a nums = [3,2,4], target = 6 \u8f93\u51fa\uff1a [1,2] \u793a\u4f8b 3\uff1a \u8f93\u5165\uff1a nums = [3,3], target = 6 \u8f93\u51fa\uff1a [0,1] \u63d0\u793a\uff1a 2 <= nums.length <= 10 4 -10 9 <= nums[i] <= 10 9 -10 9 <= target <= 10 9 \u53ea\u4f1a\u5b58\u5728\u4e00\u4e2a\u6709\u6548\u7b54\u6848 \u53c2\u8003\u4ee3\u7801 public class Solution { public int[] twoSum(int[] nums, int target) { // \u952e\u5b58\u50a8\u6570\u7ec4\u4e2d\u7684\u503c\uff0c\u503c\u5b58\u50a8\u6570\u7ec4\u5143\u7d20\u7d22\u5f15 Map<Integer, Integer> hashMap = new HashMap<>(); for (int i = 0; i < nums.length; i++) { if (hashMap.containsKey(target - nums[i])) { return new int[]{hashMap.get(target - nums[i]), i}; } hashMap.put(nums[i], i); } throw new IllegalArgumentException(\"No two sum solution\"); } }","title":"1. \u4e24\u6570\u4e4b\u548c"},{"location":"1.%20%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/#1","text":"\u94fe\u63a5","title":"\u300c\u529b\u6263\u300d\u7b2c 1 \u9898\uff1a\u4e24\u6570\u4e4b\u548c"},{"location":"1.%20%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/#_1","text":"\u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 nums \u548c\u4e00\u4e2a\u6574\u6570\u76ee\u6807\u503c target \uff0c\u8bf7\u4f60\u5728\u8be5\u6570\u7ec4\u4e2d\u627e\u51fa \u548c\u4e3a\u76ee\u6807\u503c target \u7684\u90a3 \u4e24\u4e2a \u6574\u6570\uff0c\u5e76\u8fd4\u56de\u5b83\u4eec\u7684\u6570\u7ec4\u4e0b\u6807\u3002 \u4f60\u53ef\u4ee5\u5047\u8bbe\u6bcf\u79cd\u8f93\u5165\u53ea\u4f1a\u5bf9\u5e94\u4e00\u4e2a\u7b54\u6848\u3002\u4f46\u662f\uff0c\u6570\u7ec4\u4e2d\u540c\u4e00\u4e2a\u5143\u7d20\u5728\u7b54\u6848\u91cc\u4e0d\u80fd\u91cd\u590d\u51fa\u73b0\u3002 \u4f60\u53ef\u4ee5\u6309\u4efb\u610f\u987a\u5e8f\u8fd4\u56de\u7b54\u6848\u3002 \u793a\u4f8b 1\uff1a \u8f93\u5165\uff1a nums = [2,7,11,15], target = 9 \u8f93\u51fa\uff1a [0,1] \u89e3\u91ca\uff1a \u56e0\u4e3a nums[0] + nums[1] == 9 \uff0c\u8fd4\u56de [0, 1] \u3002 \u793a\u4f8b 2\uff1a \u8f93\u5165\uff1a nums = [3,2,4], target = 6 \u8f93\u51fa\uff1a [1,2] \u793a\u4f8b 3\uff1a \u8f93\u5165\uff1a nums = [3,3], target = 6 \u8f93\u51fa\uff1a [0,1] \u63d0\u793a\uff1a 2 <= nums.length <= 10 4 -10 9 <= nums[i] <= 10 9 -10 9 <= target <= 10 9 \u53ea\u4f1a\u5b58\u5728\u4e00\u4e2a\u6709\u6548\u7b54\u6848","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"1.%20%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/#_2","text":"public class Solution { public int[] twoSum(int[] nums, int target) { // \u952e\u5b58\u50a8\u6570\u7ec4\u4e2d\u7684\u503c\uff0c\u503c\u5b58\u50a8\u6570\u7ec4\u5143\u7d20\u7d22\u5f15 Map<Integer, Integer> hashMap = new HashMap<>(); for (int i = 0; i < nums.length; i++) { if (hashMap.containsKey(target - nums[i])) { return new int[]{hashMap.get(target - nums[i]), i}; } hashMap.put(nums[i], i); } throw new IllegalArgumentException(\"No two sum solution\"); } }","title":"\u53c2\u8003\u4ee3\u7801"},{"location":"10.%20%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%8C%B9%E9%85%8D/","text":"\u300c\u529b\u6263\u300d\u7b2c 10 \u9898\uff1a\u6b63\u5219\u8868\u8fbe\u5f0f\u5339\u914d \u94fe\u63a5 \u7ed9\u4f60\u4e00\u4e2a\u5b57\u7b26\u4e32 s \u548c\u4e00\u4e2a\u5b57\u7b26\u89c4\u5f8b p \uff0c\u8bf7\u4f60\u6765\u5b9e\u73b0\u4e00\u4e2a\u652f\u6301 '.' \u548c '*' \u7684\u6b63\u5219\u8868\u8fbe\u5f0f\u5339\u914d\u3002 '.' \u5339\u914d\u4efb\u610f\u5355\u4e2a\u5b57\u7b26 '*' \u5339\u914d\u96f6\u4e2a\u6216\u591a\u4e2a\u524d\u9762\u7684\u90a3\u4e00\u4e2a\u5143\u7d20 \u6240\u8c13\u5339\u914d\uff0c\u662f\u8981\u6db5\u76d6 \u6574\u4e2a \u5b57\u7b26\u4e32 s \u7684\uff0c\u800c\u4e0d\u662f\u90e8\u5206\u5b57\u7b26\u4e32\u3002 \u793a\u4f8b 1\uff1a \u8f93\u5165\uff1a s = \"aa\", p = \"a\" \u8f93\u51fa\uff1a false \u89e3\u91ca\uff1a \"a\" \u65e0\u6cd5\u5339\u914d \"aa\" \u6574\u4e2a\u5b57\u7b26\u4e32\u3002 \u793a\u4f8b 2: \u8f93\u5165\uff1a s = \"aa\", p = \"a*\" \u8f93\u51fa\uff1a true \u89e3\u91ca\uff1a \u56e0\u4e3a '*' \u4ee3\u8868\u53ef\u4ee5\u5339\u914d\u96f6\u4e2a\u6216\u591a\u4e2a\u524d\u9762\u7684\u90a3\u4e00\u4e2a\u5143\u7d20, \u5728\u8fd9\u91cc\u524d\u9762\u7684\u5143\u7d20\u5c31\u662f 'a'\u3002\u56e0\u6b64\uff0c\u5b57\u7b26\u4e32 \"aa\" \u53ef\u88ab\u89c6\u4e3a 'a' \u91cd\u590d\u4e86\u4e00\u6b21\u3002 \u793a\u4f8b 3\uff1a \u8f93\u5165\uff1a s = \"ab\", p = \".*\" \u8f93\u51fa\uff1a true \u89e3\u91ca\uff1a \".*\" \u8868\u793a\u53ef\u5339\u914d\u96f6\u4e2a\u6216\u591a\u4e2a\uff08'*'\uff09\u4efb\u610f\u5b57\u7b26\uff08'.'\uff09\u3002 \u63d0\u793a\uff1a 1 <= s.length <= 20 1 <= p.length <= 30 s \u53ea\u5305\u542b\u4ece a-z \u7684\u5c0f\u5199\u5b57\u6bcd\u3002 p \u53ea\u5305\u542b\u4ece a-z \u7684\u5c0f\u5199\u5b57\u6bcd\uff0c\u4ee5\u53ca\u5b57\u7b26 . \u548c * \u3002 \u4fdd\u8bc1\u6bcf\u6b21\u51fa\u73b0\u5b57\u7b26 * \u65f6\uff0c\u524d\u9762\u90fd\u5339\u914d\u5230\u6709\u6548\u7684\u5b57\u7b26 \u52a8\u6001\u89c4\u5212 \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(mn) \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(mn) public class Solution { public boolean isMatch(String s, String p) { // dp[i][j] \u8868\u793a s \u7684\u524d i \u4e2a\u5b57\u7b26\u4e0e p \u4e2d\u7684\u524d j \u4e2a\u5b57\u7b26\u662f\u5426\u80fd\u591f\u5339\u914d boolean[][] dp = new boolean[s.length() + 1][p.length() + 1]; dp[0][0] = true; // i \u4ece 0 \u5f00\u59cb\u662f\u8ba9 '.*' \u7b49\u7b49\u53ef\u4ee5\u5339\u914d '' for (int i = 0; i < dp.length; i++) { for (int j = 1; j < dp[i].length; j++) { if (p.charAt(j - 1) == '*') { // \u6b64\u65f6\u5c06 p \u4e2d\u7684\u7b2c j - 1 \u4e2a\u548c\u7b2c j \u4e2a\u5b57\u7b26\u770b\u505a\u4e00\u4e2a\u7ec4\u5408\uff0c\u6709\u4ee5\u4e0b\u4e24\u79cd\u60c5\u51b5\uff1a // 1\u3001\u5339\u914d\u5b57\u7b26 s \u7684\u7b2c i \u4e2a\u5b57\u7b26 if (matches(s, p, i, j - 1)) { // \u6ce8\u610f\uff1a\u5373\u4f7f\u80fd\u591f\u5339\u914d\uff0c\u4e5f\u6709\u53ef\u80fd\u5339\u914d\u96f6\u6b21\uff0c\u6bd4\u5982 s=\"aaa\" p=\"ab*a*c*a\" // \u6545\u9700\u8981\u5c06\u8be5\u5b57\u7b26\u6254\u6389\u800c\u540e\u7ee7\u7eed\u8fdb\u884c\u5339\u914d or \u5c06\u8be5\u7ec4\u5408\u6254\u6389\u800c\u540e\u4e0d\u518d\u8fdb\u884c\u5339\u914d dp[i][j] = dp[i - 1][j] || dp[i][j - 2]; } else { // 2\u3001\u4e0d\u5339\u914d\u5b57\u7b26 s \u7684\u7b2c i \u4e2a\u5b57\u7b26\uff0c\u5c06\u8be5\u7ec4\u5408\u6254\u6389\uff0c\u4e0d\u518d\u8fdb\u884c\u5339\u914d dp[i][j] = dp[i][j - 2]; } } else if (matches(s, p, i, j)) { // s \u7684\u7b2c i \u4e2a\u5b57\u7b26\u4e0e p \u4e2d\u7684\u7b2c j \u4e2a\u5b57\u7b26\u90fd\u4e3a\u5c0f\u5199\u5b57\u6bcd\u4e14\u76f8\u7b49 // \u6216\u8005 p \u4e2d\u7684\u7b2c j \u4e2a\u5b57\u7b26\u4e3a '.'\uff0c\u76f4\u63a5\u770b\u5404\u81ea\u524d\u4e00\u4e2a\u5b57\u7b26\u5c31\u884c dp[i][j] = dp[i - 1][j - 1]; } // \u5269\u4e0b\u7684\u60c5\u51b5\u5c31\u662f s \u7684\u7b2c i \u4e2a\u5b57\u7b26\u4e0e p \u4e2d\u7684\u7b2c j \u4e2a\u5b57\u7b26\u90fd\u4e3a\u5c0f\u5199\u5b57\u6bcd\u4e14\u4e0d\u76f8\u7b49 } } return dp[s.length()][p.length()]; } /** * \u5224\u65ad s \u7684\u7b2c i \u4e2a\u5b57\u7b26\u4e0e p \u4e2d\u7684\u7b2c j \u4e2a\u5b57\u7b26\u662f\u5426\u76f8\u7b49 */ private boolean matches(String s, String p, int i, int j) { if (i == 0) { return false; } return p.charAt(j - 1) == s.charAt(i - 1) || p.charAt(j - 1) == '.'; } }","title":"\u300c\u529b\u6263\u300d\u7b2c 10 \u9898\uff1a\u6b63\u5219\u8868\u8fbe\u5f0f\u5339\u914d\uff08\u4e2d\u7b49\uff09"},{"location":"10.%20%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%8C%B9%E9%85%8D/#10","text":"\u94fe\u63a5 \u7ed9\u4f60\u4e00\u4e2a\u5b57\u7b26\u4e32 s \u548c\u4e00\u4e2a\u5b57\u7b26\u89c4\u5f8b p \uff0c\u8bf7\u4f60\u6765\u5b9e\u73b0\u4e00\u4e2a\u652f\u6301 '.' \u548c '*' \u7684\u6b63\u5219\u8868\u8fbe\u5f0f\u5339\u914d\u3002 '.' \u5339\u914d\u4efb\u610f\u5355\u4e2a\u5b57\u7b26 '*' \u5339\u914d\u96f6\u4e2a\u6216\u591a\u4e2a\u524d\u9762\u7684\u90a3\u4e00\u4e2a\u5143\u7d20 \u6240\u8c13\u5339\u914d\uff0c\u662f\u8981\u6db5\u76d6 \u6574\u4e2a \u5b57\u7b26\u4e32 s \u7684\uff0c\u800c\u4e0d\u662f\u90e8\u5206\u5b57\u7b26\u4e32\u3002 \u793a\u4f8b 1\uff1a \u8f93\u5165\uff1a s = \"aa\", p = \"a\" \u8f93\u51fa\uff1a false \u89e3\u91ca\uff1a \"a\" \u65e0\u6cd5\u5339\u914d \"aa\" \u6574\u4e2a\u5b57\u7b26\u4e32\u3002 \u793a\u4f8b 2: \u8f93\u5165\uff1a s = \"aa\", p = \"a*\" \u8f93\u51fa\uff1a true \u89e3\u91ca\uff1a \u56e0\u4e3a '*' \u4ee3\u8868\u53ef\u4ee5\u5339\u914d\u96f6\u4e2a\u6216\u591a\u4e2a\u524d\u9762\u7684\u90a3\u4e00\u4e2a\u5143\u7d20, \u5728\u8fd9\u91cc\u524d\u9762\u7684\u5143\u7d20\u5c31\u662f 'a'\u3002\u56e0\u6b64\uff0c\u5b57\u7b26\u4e32 \"aa\" \u53ef\u88ab\u89c6\u4e3a 'a' \u91cd\u590d\u4e86\u4e00\u6b21\u3002 \u793a\u4f8b 3\uff1a \u8f93\u5165\uff1a s = \"ab\", p = \".*\" \u8f93\u51fa\uff1a true \u89e3\u91ca\uff1a \".*\" \u8868\u793a\u53ef\u5339\u914d\u96f6\u4e2a\u6216\u591a\u4e2a\uff08'*'\uff09\u4efb\u610f\u5b57\u7b26\uff08'.'\uff09\u3002 \u63d0\u793a\uff1a 1 <= s.length <= 20 1 <= p.length <= 30 s \u53ea\u5305\u542b\u4ece a-z \u7684\u5c0f\u5199\u5b57\u6bcd\u3002 p \u53ea\u5305\u542b\u4ece a-z \u7684\u5c0f\u5199\u5b57\u6bcd\uff0c\u4ee5\u53ca\u5b57\u7b26 . \u548c * \u3002 \u4fdd\u8bc1\u6bcf\u6b21\u51fa\u73b0\u5b57\u7b26 * \u65f6\uff0c\u524d\u9762\u90fd\u5339\u914d\u5230\u6709\u6548\u7684\u5b57\u7b26","title":"\u300c\u529b\u6263\u300d\u7b2c 10 \u9898\uff1a\u6b63\u5219\u8868\u8fbe\u5f0f\u5339\u914d"},{"location":"10.%20%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%8C%B9%E9%85%8D/#_1","text":"\u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(mn) \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(mn) public class Solution { public boolean isMatch(String s, String p) { // dp[i][j] \u8868\u793a s \u7684\u524d i \u4e2a\u5b57\u7b26\u4e0e p \u4e2d\u7684\u524d j \u4e2a\u5b57\u7b26\u662f\u5426\u80fd\u591f\u5339\u914d boolean[][] dp = new boolean[s.length() + 1][p.length() + 1]; dp[0][0] = true; // i \u4ece 0 \u5f00\u59cb\u662f\u8ba9 '.*' \u7b49\u7b49\u53ef\u4ee5\u5339\u914d '' for (int i = 0; i < dp.length; i++) { for (int j = 1; j < dp[i].length; j++) { if (p.charAt(j - 1) == '*') { // \u6b64\u65f6\u5c06 p \u4e2d\u7684\u7b2c j - 1 \u4e2a\u548c\u7b2c j \u4e2a\u5b57\u7b26\u770b\u505a\u4e00\u4e2a\u7ec4\u5408\uff0c\u6709\u4ee5\u4e0b\u4e24\u79cd\u60c5\u51b5\uff1a // 1\u3001\u5339\u914d\u5b57\u7b26 s \u7684\u7b2c i \u4e2a\u5b57\u7b26 if (matches(s, p, i, j - 1)) { // \u6ce8\u610f\uff1a\u5373\u4f7f\u80fd\u591f\u5339\u914d\uff0c\u4e5f\u6709\u53ef\u80fd\u5339\u914d\u96f6\u6b21\uff0c\u6bd4\u5982 s=\"aaa\" p=\"ab*a*c*a\" // \u6545\u9700\u8981\u5c06\u8be5\u5b57\u7b26\u6254\u6389\u800c\u540e\u7ee7\u7eed\u8fdb\u884c\u5339\u914d or \u5c06\u8be5\u7ec4\u5408\u6254\u6389\u800c\u540e\u4e0d\u518d\u8fdb\u884c\u5339\u914d dp[i][j] = dp[i - 1][j] || dp[i][j - 2]; } else { // 2\u3001\u4e0d\u5339\u914d\u5b57\u7b26 s \u7684\u7b2c i \u4e2a\u5b57\u7b26\uff0c\u5c06\u8be5\u7ec4\u5408\u6254\u6389\uff0c\u4e0d\u518d\u8fdb\u884c\u5339\u914d dp[i][j] = dp[i][j - 2]; } } else if (matches(s, p, i, j)) { // s \u7684\u7b2c i \u4e2a\u5b57\u7b26\u4e0e p \u4e2d\u7684\u7b2c j \u4e2a\u5b57\u7b26\u90fd\u4e3a\u5c0f\u5199\u5b57\u6bcd\u4e14\u76f8\u7b49 // \u6216\u8005 p \u4e2d\u7684\u7b2c j \u4e2a\u5b57\u7b26\u4e3a '.'\uff0c\u76f4\u63a5\u770b\u5404\u81ea\u524d\u4e00\u4e2a\u5b57\u7b26\u5c31\u884c dp[i][j] = dp[i - 1][j - 1]; } // \u5269\u4e0b\u7684\u60c5\u51b5\u5c31\u662f s \u7684\u7b2c i \u4e2a\u5b57\u7b26\u4e0e p \u4e2d\u7684\u7b2c j \u4e2a\u5b57\u7b26\u90fd\u4e3a\u5c0f\u5199\u5b57\u6bcd\u4e14\u4e0d\u76f8\u7b49 } } return dp[s.length()][p.length()]; } /** * \u5224\u65ad s \u7684\u7b2c i \u4e2a\u5b57\u7b26\u4e0e p \u4e2d\u7684\u7b2c j \u4e2a\u5b57\u7b26\u662f\u5426\u76f8\u7b49 */ private boolean matches(String s, String p, int i, int j) { if (i == 0) { return false; } return p.charAt(j - 1) == s.charAt(i - 1) || p.charAt(j - 1) == '.'; } }","title":"\u52a8\u6001\u89c4\u5212"},{"location":"2.%20%E4%B8%A4%E6%95%B0%E7%9B%B8%E5%8A%A0/","text":"\u300c\u529b\u6263\u300d\u7b2c 2 \u9898\uff1a\u4e24\u6570\u76f8\u52a0 \u94fe\u63a5 \u7ed9\u4f60\u4e24\u4e2a \u975e\u7a7a \u7684\u94fe\u8868\uff0c\u8868\u793a\u4e24\u4e2a\u975e\u8d1f\u7684\u6574\u6570\u3002\u5b83\u4eec\u6bcf\u4f4d\u6570\u5b57\u90fd\u662f\u6309\u7167 \u9006\u5e8f \u7684\u65b9\u5f0f\u5b58\u50a8\u7684\uff0c\u5e76\u4e14\u6bcf\u4e2a\u8282\u70b9\u53ea\u80fd\u5b58\u50a8 \u4e00\u4f4d \u6570\u5b57\u3002 \u8bf7\u4f60\u5c06\u4e24\u4e2a\u6570\u76f8\u52a0\uff0c\u5e76\u4ee5\u76f8\u540c\u5f62\u5f0f\u8fd4\u56de\u4e00\u4e2a\u8868\u793a\u548c\u7684\u94fe\u8868\u3002 \u4f60\u53ef\u4ee5\u5047\u8bbe\u9664\u4e86\u6570\u5b57 0 \u4e4b\u5916\uff0c\u8fd9\u4e24\u4e2a\u6570\u90fd\u4e0d\u4f1a\u4ee5 0 \u5f00\u5934\u3002 \u793a\u4f8b 1\uff1a \u8f93\u5165\uff1a l1 = [2,4,3], l2 = [5,6,4] \u8f93\u51fa\uff1a [7,0,8] \u89e3\u91ca\uff1a 342 + 465 = 807. \u793a\u4f8b 2\uff1a \u8f93\u5165\uff1a l1 = [0], l2 = [0] \u8f93\u51fa\uff1a [0] \u793a\u4f8b 3\uff1a \u8f93\u5165\uff1a l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9] \u8f93\u51fa\uff1a [8,9,9,9,0,0,0,1] \u63d0\u793a\uff1a \u6bcf\u4e2a\u94fe\u8868\u4e2d\u7684\u8282\u70b9\u6570\u5728\u8303\u56f4 [1, 100] \u5185 0 < = Node.val < = 9 \u9898\u76ee\u6570\u636e\u4fdd\u8bc1\u5217\u8868\u8868\u793a\u7684\u6570\u5b57\u4e0d\u542b\u524d\u5bfc\u96f6 \u94fe\u8868\uff1a\u7a7f\u9488\u5f15\u7ebf \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(max(m,n)) \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1) /** * Definition for singly-linked list. * public class ListNode { * int val; * ListNode next; * ListNode() {} * ListNode(int val) { this.val = val; } * ListNode(int val, ListNode next) { this.val = val; this.next = next; } * } */ public class Solution { public ListNode addTwoNumbers(ListNode l1, ListNode l2) { // \u8bbe\u7f6e\u865a\u62df\u5934\u7ed3\u70b9\uff08\u5e38\u7528\u6280\u5de7\uff09 ListNode dummy = new ListNode(-1); ListNode cur = dummy; int sum = 0; // \u4e24\u4e2a\u94fe\u8868\u6709\u4e00\u4e2a\u975e\u7a7a\uff0c\u6c42\u548c\u5c31\u4e0d\u4f1a\u7ec8\u6b62 while (l1 != null || l2 != null) { if (l1 != null) { sum += l1.val; l1 = l1.next; } if (l2 != null) { sum += l2.val; l2 = l2.next; } cur.next = new ListNode(sum % 10); sum /= 10; cur = cur.next; } // \u6700\u540e\u53ef\u80fd\u4f1a\u8fdb\u4f4d\uff0c\u6ce8\u610f\u5224\u65ad if (sum == 1) { cur.next = new ListNode(1); } return dummy.next; } }","title":"2. \u4e24\u6570\u76f8\u52a0"},{"location":"2.%20%E4%B8%A4%E6%95%B0%E7%9B%B8%E5%8A%A0/#2","text":"\u94fe\u63a5 \u7ed9\u4f60\u4e24\u4e2a \u975e\u7a7a \u7684\u94fe\u8868\uff0c\u8868\u793a\u4e24\u4e2a\u975e\u8d1f\u7684\u6574\u6570\u3002\u5b83\u4eec\u6bcf\u4f4d\u6570\u5b57\u90fd\u662f\u6309\u7167 \u9006\u5e8f \u7684\u65b9\u5f0f\u5b58\u50a8\u7684\uff0c\u5e76\u4e14\u6bcf\u4e2a\u8282\u70b9\u53ea\u80fd\u5b58\u50a8 \u4e00\u4f4d \u6570\u5b57\u3002 \u8bf7\u4f60\u5c06\u4e24\u4e2a\u6570\u76f8\u52a0\uff0c\u5e76\u4ee5\u76f8\u540c\u5f62\u5f0f\u8fd4\u56de\u4e00\u4e2a\u8868\u793a\u548c\u7684\u94fe\u8868\u3002 \u4f60\u53ef\u4ee5\u5047\u8bbe\u9664\u4e86\u6570\u5b57 0 \u4e4b\u5916\uff0c\u8fd9\u4e24\u4e2a\u6570\u90fd\u4e0d\u4f1a\u4ee5 0 \u5f00\u5934\u3002 \u793a\u4f8b 1\uff1a \u8f93\u5165\uff1a l1 = [2,4,3], l2 = [5,6,4] \u8f93\u51fa\uff1a [7,0,8] \u89e3\u91ca\uff1a 342 + 465 = 807. \u793a\u4f8b 2\uff1a \u8f93\u5165\uff1a l1 = [0], l2 = [0] \u8f93\u51fa\uff1a [0] \u793a\u4f8b 3\uff1a \u8f93\u5165\uff1a l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9] \u8f93\u51fa\uff1a [8,9,9,9,0,0,0,1] \u63d0\u793a\uff1a \u6bcf\u4e2a\u94fe\u8868\u4e2d\u7684\u8282\u70b9\u6570\u5728\u8303\u56f4 [1, 100] \u5185 0 < = Node.val < = 9 \u9898\u76ee\u6570\u636e\u4fdd\u8bc1\u5217\u8868\u8868\u793a\u7684\u6570\u5b57\u4e0d\u542b\u524d\u5bfc\u96f6","title":"\u300c\u529b\u6263\u300d\u7b2c 2 \u9898\uff1a\u4e24\u6570\u76f8\u52a0"},{"location":"2.%20%E4%B8%A4%E6%95%B0%E7%9B%B8%E5%8A%A0/#_1","text":"\u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(max(m,n)) \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1) /** * Definition for singly-linked list. * public class ListNode { * int val; * ListNode next; * ListNode() {} * ListNode(int val) { this.val = val; } * ListNode(int val, ListNode next) { this.val = val; this.next = next; } * } */ public class Solution { public ListNode addTwoNumbers(ListNode l1, ListNode l2) { // \u8bbe\u7f6e\u865a\u62df\u5934\u7ed3\u70b9\uff08\u5e38\u7528\u6280\u5de7\uff09 ListNode dummy = new ListNode(-1); ListNode cur = dummy; int sum = 0; // \u4e24\u4e2a\u94fe\u8868\u6709\u4e00\u4e2a\u975e\u7a7a\uff0c\u6c42\u548c\u5c31\u4e0d\u4f1a\u7ec8\u6b62 while (l1 != null || l2 != null) { if (l1 != null) { sum += l1.val; l1 = l1.next; } if (l2 != null) { sum += l2.val; l2 = l2.next; } cur.next = new ListNode(sum % 10); sum /= 10; cur = cur.next; } // \u6700\u540e\u53ef\u80fd\u4f1a\u8fdb\u4f4d\uff0c\u6ce8\u610f\u5224\u65ad if (sum == 1) { cur.next = new ListNode(1); } return dummy.next; } }","title":"\u94fe\u8868\uff1a\u7a7f\u9488\u5f15\u7ebf"},{"location":"3.%20%E6%97%A0%E9%87%8D%E5%A4%8D%E5%AD%97%E7%AC%A6%E7%9A%84%E6%9C%80%E9%95%BF%E5%AD%90%E4%B8%B2/","text":"\u300c\u529b\u6263\u300d\u7b2c 3 \u9898\uff1a\u65e0\u91cd\u590d\u5b57\u7b26\u7684\u6700\u957f\u5b50\u4e32 \u94fe\u63a5 \u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32 s \uff0c\u8bf7\u4f60\u627e\u51fa\u5176\u4e2d\u4e0d\u542b\u6709\u91cd\u590d\u5b57\u7b26\u7684 \u6700\u957f\u5b50\u4e32 \u7684\u957f\u5ea6\u3002 \u793a\u4f8b 1: \u8f93\u5165: s = \"abcabcbb\" \u8f93\u51fa: 3 \u89e3\u91ca: \u56e0\u4e3a\u65e0\u91cd\u590d\u5b57\u7b26\u7684\u6700\u957f\u5b50\u4e32\u662f \"abc\"\uff0c\u6240\u4ee5\u5176\u957f\u5ea6\u4e3a 3\u3002 \u793a\u4f8b 2: \u8f93\u5165: s = \"bbbbb\" \u8f93\u51fa: 1 \u89e3\u91ca: \u56e0\u4e3a\u65e0\u91cd\u590d\u5b57\u7b26\u7684\u6700\u957f\u5b50\u4e32\u662f \"b\"\uff0c\u6240\u4ee5\u5176\u957f\u5ea6\u4e3a 1\u3002 \u793a\u4f8b 3: \u8f93\u5165: s = \"pwwkew\" \u8f93\u51fa: 3 \u89e3\u91ca: \u56e0\u4e3a\u65e0\u91cd\u590d\u5b57\u7b26\u7684\u6700\u957f\u5b50\u4e32\u662f \"wke\"\uff0c\u6240\u4ee5\u5176\u957f\u5ea6\u4e3a 3\u3002 \u8bf7\u6ce8\u610f\uff0c\u4f60\u7684\u7b54\u6848\u5fc5\u987b\u662f \u5b50\u4e32 \u7684\u957f\u5ea6\uff0c\"pwke\" \u662f\u4e00\u4e2a\u5b50\u5e8f\u5217\uff0c\u4e0d\u662f\u5b50\u4e32\u3002 \u63d0\u793a\uff1a 0 <= s.length <= 5 * 10 4 s \u7531\u82f1\u6587\u5b57\u6bcd\u3001\u6570\u5b57\u3001\u7b26\u53f7\u548c\u7a7a\u683c\u7ec4\u6210 \u6ed1\u52a8\u7a97\u53e3 \u65b9\u6cd5\u4e00\uff1a \u8fd9\u4e2a\u65b9\u6cd5\u5e76\u6ca1\u6709\u51fb\u8d25 100% \uff0c\u5199\u8fd9\u91cc\u662f\u65b9\u4fbf\u7406\u89e3\uff0c\u65b9\u6cd5\u4e8c\u5229\u7528\u7a7a\u95f4\u6362\u4e86\u4e00\u4e9b\u65f6\u95f4\u63d0\u9ad8\u4e86\u8fd0\u884c\u6548\u7387\u624d\u51fb\u8d25 100% \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n) \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1) public class Solution { public int lengthOfLongestSubstring(String s) { int len = s.length(); if (len < 2) { return len; } // key\uff1a\u5b57\u7b26\uff0cvalue\uff1a\u6700\u65b0\u7684\u4e0b\u6807 Map<Character, Integer> map = new HashMap<>(); int res = 0; // [left, right] \u4e2d\u65e0\u91cd\u590d\u7684\u5143\u7d20 for (int left = 0, right = 0; right < len; right++) { Character c = s.charAt(right); if (map.containsKey(c)) { // \u5982\u679c\u5f53\u524d\u5b57\u7b26\u5728 map \u4e2d\u51fa\u73b0\u8fc7\uff0c\u770b\u5b58\u50a8\u7684\u4e0b\u6807\u662f\u5426\u5927\u4e8e left left = Math.max(left, map.get(c) + 1); } map.put(c, right); res = Math.max(res, right - left + 1); } return res; } } \u65b9\u6cd5\u4e8c\uff1a \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n) \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n) public class Solution { public int lengthOfLongestSubstring(String s) { int len = s.length(); if (len < 2) { return len; } // \u7531\u4e8e s.charAt(i) \u64cd\u4f5c\u4f1a\u53bb\u68c0\u67e5\u4e0b\u6807\u662f\u5426\u8d8a\u754c\uff0c\u56e0\u6b64 // \u5728 Java \u91cc\uff0c\u5c06\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u5b57\u7b26\u6570\u7ec4\u662f\u5e38\u89c1\u7684\u64cd\u4f5c char[] chars = s.toCharArray(); // \u7a97\u53e3\u6570\u7ec4\uff0c\u7528\u6765\u4ee3\u66ff HashMap\uff0c\u63d0\u9ad8\u8fd0\u884c\u6548\u7387 // windows[i] \u5b58\u50a8\u7684\u662f chars \u4e2d\u5b57\u7b26\u503c\u4e3a i \u7684\u6700\u65b0\u7d22\u5f15 int[] window = new int[128]; for (int i = 0; i < 128; i++) { window[i] = -1; } int res = 0; // chars \u5728 [left, right] \u4e2d\u6ca1\u6709\u91cd\u590d\u5143\u7d20 for (int left = 0, right = 0; right < len; right++) { // \u5b57\u7b26\u503c\u4e3a chars[right] \u5728\u524d\u9762\u51fa\u73b0\u8fc7\u4e86\uff0c // \u524d\u4e00\u6b21\u51fa\u73b0\u7684\u7d22\u5f15\u662f\u5426\u5728 [left, right] \u4e2d\u51b3\u5b9a\u662f\u5426\u8fdb\u884c\u7a97\u53e3\u6ed1\u52a8 if (window[chars[right]] != -1) { left = Math.max(left, window[chars[right]] + 1); } // \u66f4\u65b0\u4e00\u4e0b\u5b57\u7b26\u503c\u4e3a chars[right] \u7684\u6700\u65b0\u7d22\u5f15 window[chars[right]] = right; // \u8ba1\u7b97 [left, right] \u533a\u95f4\u957f\u5ea6\uff0c\u51b3\u5b9a\u662f\u5426\u66f4\u65b0 res res = Math.max(res, right - left + 1); } return res; } }","title":"3. \u65e0\u91cd\u590d\u5b57\u7b26\u7684\u6700\u957f\u5b50\u4e32"},{"location":"3.%20%E6%97%A0%E9%87%8D%E5%A4%8D%E5%AD%97%E7%AC%A6%E7%9A%84%E6%9C%80%E9%95%BF%E5%AD%90%E4%B8%B2/#3","text":"\u94fe\u63a5 \u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32 s \uff0c\u8bf7\u4f60\u627e\u51fa\u5176\u4e2d\u4e0d\u542b\u6709\u91cd\u590d\u5b57\u7b26\u7684 \u6700\u957f\u5b50\u4e32 \u7684\u957f\u5ea6\u3002 \u793a\u4f8b 1: \u8f93\u5165: s = \"abcabcbb\" \u8f93\u51fa: 3 \u89e3\u91ca: \u56e0\u4e3a\u65e0\u91cd\u590d\u5b57\u7b26\u7684\u6700\u957f\u5b50\u4e32\u662f \"abc\"\uff0c\u6240\u4ee5\u5176\u957f\u5ea6\u4e3a 3\u3002 \u793a\u4f8b 2: \u8f93\u5165: s = \"bbbbb\" \u8f93\u51fa: 1 \u89e3\u91ca: \u56e0\u4e3a\u65e0\u91cd\u590d\u5b57\u7b26\u7684\u6700\u957f\u5b50\u4e32\u662f \"b\"\uff0c\u6240\u4ee5\u5176\u957f\u5ea6\u4e3a 1\u3002 \u793a\u4f8b 3: \u8f93\u5165: s = \"pwwkew\" \u8f93\u51fa: 3 \u89e3\u91ca: \u56e0\u4e3a\u65e0\u91cd\u590d\u5b57\u7b26\u7684\u6700\u957f\u5b50\u4e32\u662f \"wke\"\uff0c\u6240\u4ee5\u5176\u957f\u5ea6\u4e3a 3\u3002 \u8bf7\u6ce8\u610f\uff0c\u4f60\u7684\u7b54\u6848\u5fc5\u987b\u662f \u5b50\u4e32 \u7684\u957f\u5ea6\uff0c\"pwke\" \u662f\u4e00\u4e2a\u5b50\u5e8f\u5217\uff0c\u4e0d\u662f\u5b50\u4e32\u3002 \u63d0\u793a\uff1a 0 <= s.length <= 5 * 10 4 s \u7531\u82f1\u6587\u5b57\u6bcd\u3001\u6570\u5b57\u3001\u7b26\u53f7\u548c\u7a7a\u683c\u7ec4\u6210","title":"\u300c\u529b\u6263\u300d\u7b2c 3 \u9898\uff1a\u65e0\u91cd\u590d\u5b57\u7b26\u7684\u6700\u957f\u5b50\u4e32"},{"location":"3.%20%E6%97%A0%E9%87%8D%E5%A4%8D%E5%AD%97%E7%AC%A6%E7%9A%84%E6%9C%80%E9%95%BF%E5%AD%90%E4%B8%B2/#_1","text":"\u65b9\u6cd5\u4e00\uff1a \u8fd9\u4e2a\u65b9\u6cd5\u5e76\u6ca1\u6709\u51fb\u8d25 100% \uff0c\u5199\u8fd9\u91cc\u662f\u65b9\u4fbf\u7406\u89e3\uff0c\u65b9\u6cd5\u4e8c\u5229\u7528\u7a7a\u95f4\u6362\u4e86\u4e00\u4e9b\u65f6\u95f4\u63d0\u9ad8\u4e86\u8fd0\u884c\u6548\u7387\u624d\u51fb\u8d25 100% \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n) \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1) public class Solution { public int lengthOfLongestSubstring(String s) { int len = s.length(); if (len < 2) { return len; } // key\uff1a\u5b57\u7b26\uff0cvalue\uff1a\u6700\u65b0\u7684\u4e0b\u6807 Map<Character, Integer> map = new HashMap<>(); int res = 0; // [left, right] \u4e2d\u65e0\u91cd\u590d\u7684\u5143\u7d20 for (int left = 0, right = 0; right < len; right++) { Character c = s.charAt(right); if (map.containsKey(c)) { // \u5982\u679c\u5f53\u524d\u5b57\u7b26\u5728 map \u4e2d\u51fa\u73b0\u8fc7\uff0c\u770b\u5b58\u50a8\u7684\u4e0b\u6807\u662f\u5426\u5927\u4e8e left left = Math.max(left, map.get(c) + 1); } map.put(c, right); res = Math.max(res, right - left + 1); } return res; } } \u65b9\u6cd5\u4e8c\uff1a \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n) \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n) public class Solution { public int lengthOfLongestSubstring(String s) { int len = s.length(); if (len < 2) { return len; } // \u7531\u4e8e s.charAt(i) \u64cd\u4f5c\u4f1a\u53bb\u68c0\u67e5\u4e0b\u6807\u662f\u5426\u8d8a\u754c\uff0c\u56e0\u6b64 // \u5728 Java \u91cc\uff0c\u5c06\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u5b57\u7b26\u6570\u7ec4\u662f\u5e38\u89c1\u7684\u64cd\u4f5c char[] chars = s.toCharArray(); // \u7a97\u53e3\u6570\u7ec4\uff0c\u7528\u6765\u4ee3\u66ff HashMap\uff0c\u63d0\u9ad8\u8fd0\u884c\u6548\u7387 // windows[i] \u5b58\u50a8\u7684\u662f chars \u4e2d\u5b57\u7b26\u503c\u4e3a i \u7684\u6700\u65b0\u7d22\u5f15 int[] window = new int[128]; for (int i = 0; i < 128; i++) { window[i] = -1; } int res = 0; // chars \u5728 [left, right] \u4e2d\u6ca1\u6709\u91cd\u590d\u5143\u7d20 for (int left = 0, right = 0; right < len; right++) { // \u5b57\u7b26\u503c\u4e3a chars[right] \u5728\u524d\u9762\u51fa\u73b0\u8fc7\u4e86\uff0c // \u524d\u4e00\u6b21\u51fa\u73b0\u7684\u7d22\u5f15\u662f\u5426\u5728 [left, right] \u4e2d\u51b3\u5b9a\u662f\u5426\u8fdb\u884c\u7a97\u53e3\u6ed1\u52a8 if (window[chars[right]] != -1) { left = Math.max(left, window[chars[right]] + 1); } // \u66f4\u65b0\u4e00\u4e0b\u5b57\u7b26\u503c\u4e3a chars[right] \u7684\u6700\u65b0\u7d22\u5f15 window[chars[right]] = right; // \u8ba1\u7b97 [left, right] \u533a\u95f4\u957f\u5ea6\uff0c\u51b3\u5b9a\u662f\u5426\u66f4\u65b0 res res = Math.max(res, right - left + 1); } return res; } }","title":"\u6ed1\u52a8\u7a97\u53e3"},{"location":"4.%20%E5%AF%BB%E6%89%BE%E4%B8%A4%E4%B8%AA%E6%AD%A3%E5%BA%8F%E6%95%B0%E7%BB%84%E7%9A%84%E4%B8%AD%E4%BD%8D%E6%95%B0/","text":"\u300c\u529b\u6263\u300d\u7b2c 4 \u9898\uff1a\u5bfb\u627e\u4e24\u4e2a\u6b63\u5e8f\u6570\u7ec4\u7684\u4e2d\u4f4d\u6570 \u94fe\u63a5 \u7ed9\u5b9a\u4e24\u4e2a\u5927\u5c0f\u5206\u522b\u4e3a m \u548c n \u7684\u6b63\u5e8f\uff08\u4ece\u5c0f\u5230\u5927\uff09\u6570\u7ec4 nums1 \u548c nums2 \u3002\u8bf7\u4f60\u627e\u51fa\u5e76\u8fd4\u56de\u8fd9\u4e24\u4e2a\u6b63\u5e8f\u6570\u7ec4\u7684 \u4e2d\u4f4d\u6570 \u3002 \u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5e94\u8be5\u4e3a O(log (m+n)) \u3002 \u793a\u4f8b 1\uff1a \u8f93\u5165\uff1a nums1 = [1,3], nums2 = [2] \u8f93\u51fa\uff1a 2.00000 \u89e3\u91ca\uff1a \u5408\u5e76\u6570\u7ec4 = [1,2,3] \uff0c\u4e2d\u4f4d\u6570 2 \u793a\u4f8b 2\uff1a \u8f93\u5165\uff1a nums1 = [1,2], nums2 = [3,4] \u8f93\u51fa\uff1a 2.50000 \u89e3\u91ca\uff1a \u5408\u5e76\u6570\u7ec4 = [1,2,3,4] \uff0c\u4e2d\u4f4d\u6570 (2 + 3) / 2 = 2.5 \u63d0\u793a\uff1a nums1.length == m nums2.length == n 0 <= m <= 1000 0 <= n <= 1000 1 <= m + n <= 2000 -10 6 <= nums1[i], nums2[i] <= 10 6 \u5206\u6790\uff1a \u5728\u4e24\u4e2a\u6709\u5e8f\u6570\u7ec4\u4e2d\u95f4\u753b\u4e00\u6761\u7ea2\u7ebf\uff0c\u8fd9\u6761\u7ea2\u7ebf\u6ee1\u8db3\u5982\u4e0b\u6761\u4ef6\uff1a \u6761\u4ef6\u2460\uff1a\u7ea2\u7ebf\u5de6\u8fb9\u6240\u6709\u7684\u6570\u90fd\u5c0f\u4e8e\u7b49\u4e8e\u7ea2\u7ebf\u53f3\u8fb9\u6240\u6709\u7684\u6570\uff1b \u6761\u4ef6\u2461\uff1asize(\u5de6) = size(\u53f3) \u6216 size(\u5de6) = size(\u53f3) + 1 \u8bb0 m = nums1.length, n = nums2.length m + n \u4e3a\u5947\u6570\uff1asize(\u5de6) = size(\u53f3) + 1\uff0c\u4e2d\u4f4d\u6570\u5373\u7ea2\u7ebf\u5de6\u8fb9\u6700\u5927\u503c m + n \u4e3a\u5076\u6570\uff1a\u4e2d\u4f4d\u6570\u5373\u7ea2\u7ebf\u5de6\u8fb9\u6700\u5927\u503c\u4e0e\u53f3\u8fb9\u6700\u5c0f\u503c\u7684\u5747\u503c \u6211\u4eec\u8bb0\uff1a \u6570\u7ec4 nums1 \u5728\u7ea2\u7ebf\u53f3\u8fb9\u7684\u7b2c 1 \u4e2a\u6570\u7684\u7d22\u5f15\u4e3a i \u6570\u7ec4 nums2 \u5728\u7ea2\u7ebf\u53f3\u8fb9\u7684\u7b2c 1 \u4e2a\u6570\u7684\u7d22\u5f15\u4e3a j \u6b64\u65f6\u6052\u6709 size(\u5de6) = i + j = (m + n + 1) >>> 1 \u6b64\u65f6\u95ee\u9898\u8f6c\u5316\u4e3a\u5728\u533a\u95f4 [0, m] \u4e2d\u5bfb\u627e\u7d22\u5f15 i\uff0c\u4f7f\u5f97\u6761\u4ef6\u2460\u548c\u2461\u6210\u7acb \u4e8c\u5206\u67e5\u627e\uff1a\u5728\u5faa\u73af\u4f53\u5185\u90e8\u6392\u9664\u5143\u7d20 \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(log(min(m,n))) \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1) public class Solution { public double findMedianSortedArrays(int[] nums1, int[] nums2) { // \u4e3a\u4e86\u8ba9\u641c\u7d22\u8303\u56f4\u66f4\u5c0f\uff0c\u6211\u4eec\u59cb\u7ec8\u8ba9 num1 \u662f\u90a3\u4e2a\u66f4\u77ed\u7684\u6570\u7ec4 if (nums1.length > nums2.length) { int[] temp = nums1; nums1 = nums2; nums2 = temp; } // \u4e0a\u8ff0\u4ea4\u6362\u4fdd\u8bc1\u4e86 m <= n\uff0c\u5728\u66f4\u77ed\u7684\u533a\u95f4 [0, m] \u4e2d\u641c\u7d22\uff0c\u4f1a\u66f4\u5feb\u4e00\u4e9b int m = nums1.length; int n = nums2.length; // \u4f7f\u7528\u4e8c\u5206\u67e5\u627e\u5728\u533a\u95f4 [left, right] \u4e2d\u5bfb\u627e\u7d22\u5f15 i\uff0c\u4f7f\u5f97\u6761\u4ef6\u2460\u548c\u2461\u6210\u7acb int left = 0; int right = m; // size(\u5de6)\uff0c\u53ef\u901a\u8fc7\u8be5\u6570\u6c42\u5f97 j = totalLeft - i; int totalLeft = (m + n + 1) >>> 1; while (left < right) { // \u4e0b\u9762\u7684 if \u4e2d\u5de6\u6307\u9488\u53f3\u79fb\uff0c\u6545\u800c\u9700\u8981\u5411\u4e0b\u53d6\u6574 int i = (left + right) >>> 1; int j = totalLeft - i; // nums2 \u5de6\u8fb9\u7684\u6700\u5927\u503c\u6bd4 nums1 \u53f3\u8fb9\u7684\u6700\u5c0f\u503c\u8981\u5927\uff0c\u8bf4\u660e i \u9700\u8981\u6269\u5927 if (nums2[j - 1] > nums1[i]) { left = i + 1; } else { // \u5de6\u8fb9\u7684\u6700\u5927\u503c\u5c0f\u4e8e\u7b49\u4e8e nums1 \u53f3\u8fb9\u7684\u6700\u5c0f\u503c\uff0c\u56e0\u6b64 i \u4e0d\u9700\u8981\u6269\u5927 right = i; } } // \u9000\u51fa\u5faa\u73af\u65f6\u7684 i = (left = right) \u5373\u4e3a\u6ee1\u8db3\u6761\u4ef6\u2460\u548c\u2461\u7684 i int i = left; int j = totalLeft - i; // \u8fb9\u754c\u60c5\u51b5\u9700\u8981\u7279\u6b8a\u8003\u8651 int nums1LeftMax = (i == 0) ? Integer.MIN_VALUE : nums1[i - 1]; int nums1RightMin = (i == m) ? Integer.MAX_VALUE : nums1[i]; int nums2LeftMax = (j == 0) ? Integer.MIN_VALUE : nums2[j - 1]; int nums2RightMin = (j == n) ? Integer.MAX_VALUE : nums2[j]; return (((m + n) & 1) == 1) ? Math.max(nums1LeftMax, nums2LeftMax) : (double) (Math.max(nums1LeftMax, nums2LeftMax) + Math.min(nums1RightMin, nums2RightMin)) / 2; } }","title":"\u300c\u529b\u6263\u300d\u7b2c 4 \u9898\uff1a\u5bfb\u627e\u4e24\u4e2a\u6b63\u5e8f\u6570\u7ec4\u7684\u4e2d\u4f4d\u6570\uff08\u56f0\u96be\uff09"},{"location":"4.%20%E5%AF%BB%E6%89%BE%E4%B8%A4%E4%B8%AA%E6%AD%A3%E5%BA%8F%E6%95%B0%E7%BB%84%E7%9A%84%E4%B8%AD%E4%BD%8D%E6%95%B0/#4","text":"\u94fe\u63a5 \u7ed9\u5b9a\u4e24\u4e2a\u5927\u5c0f\u5206\u522b\u4e3a m \u548c n \u7684\u6b63\u5e8f\uff08\u4ece\u5c0f\u5230\u5927\uff09\u6570\u7ec4 nums1 \u548c nums2 \u3002\u8bf7\u4f60\u627e\u51fa\u5e76\u8fd4\u56de\u8fd9\u4e24\u4e2a\u6b63\u5e8f\u6570\u7ec4\u7684 \u4e2d\u4f4d\u6570 \u3002 \u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5e94\u8be5\u4e3a O(log (m+n)) \u3002 \u793a\u4f8b 1\uff1a \u8f93\u5165\uff1a nums1 = [1,3], nums2 = [2] \u8f93\u51fa\uff1a 2.00000 \u89e3\u91ca\uff1a \u5408\u5e76\u6570\u7ec4 = [1,2,3] \uff0c\u4e2d\u4f4d\u6570 2 \u793a\u4f8b 2\uff1a \u8f93\u5165\uff1a nums1 = [1,2], nums2 = [3,4] \u8f93\u51fa\uff1a 2.50000 \u89e3\u91ca\uff1a \u5408\u5e76\u6570\u7ec4 = [1,2,3,4] \uff0c\u4e2d\u4f4d\u6570 (2 + 3) / 2 = 2.5 \u63d0\u793a\uff1a nums1.length == m nums2.length == n 0 <= m <= 1000 0 <= n <= 1000 1 <= m + n <= 2000 -10 6 <= nums1[i], nums2[i] <= 10 6","title":"\u300c\u529b\u6263\u300d\u7b2c 4 \u9898\uff1a\u5bfb\u627e\u4e24\u4e2a\u6b63\u5e8f\u6570\u7ec4\u7684\u4e2d\u4f4d\u6570"},{"location":"4.%20%E5%AF%BB%E6%89%BE%E4%B8%A4%E4%B8%AA%E6%AD%A3%E5%BA%8F%E6%95%B0%E7%BB%84%E7%9A%84%E4%B8%AD%E4%BD%8D%E6%95%B0/#_1","text":"\u5728\u4e24\u4e2a\u6709\u5e8f\u6570\u7ec4\u4e2d\u95f4\u753b\u4e00\u6761\u7ea2\u7ebf\uff0c\u8fd9\u6761\u7ea2\u7ebf\u6ee1\u8db3\u5982\u4e0b\u6761\u4ef6\uff1a \u6761\u4ef6\u2460\uff1a\u7ea2\u7ebf\u5de6\u8fb9\u6240\u6709\u7684\u6570\u90fd\u5c0f\u4e8e\u7b49\u4e8e\u7ea2\u7ebf\u53f3\u8fb9\u6240\u6709\u7684\u6570\uff1b \u6761\u4ef6\u2461\uff1asize(\u5de6) = size(\u53f3) \u6216 size(\u5de6) = size(\u53f3) + 1 \u8bb0 m = nums1.length, n = nums2.length m + n \u4e3a\u5947\u6570\uff1asize(\u5de6) = size(\u53f3) + 1\uff0c\u4e2d\u4f4d\u6570\u5373\u7ea2\u7ebf\u5de6\u8fb9\u6700\u5927\u503c m + n \u4e3a\u5076\u6570\uff1a\u4e2d\u4f4d\u6570\u5373\u7ea2\u7ebf\u5de6\u8fb9\u6700\u5927\u503c\u4e0e\u53f3\u8fb9\u6700\u5c0f\u503c\u7684\u5747\u503c \u6211\u4eec\u8bb0\uff1a \u6570\u7ec4 nums1 \u5728\u7ea2\u7ebf\u53f3\u8fb9\u7684\u7b2c 1 \u4e2a\u6570\u7684\u7d22\u5f15\u4e3a i \u6570\u7ec4 nums2 \u5728\u7ea2\u7ebf\u53f3\u8fb9\u7684\u7b2c 1 \u4e2a\u6570\u7684\u7d22\u5f15\u4e3a j \u6b64\u65f6\u6052\u6709 size(\u5de6) = i + j = (m + n + 1) >>> 1 \u6b64\u65f6\u95ee\u9898\u8f6c\u5316\u4e3a\u5728\u533a\u95f4 [0, m] \u4e2d\u5bfb\u627e\u7d22\u5f15 i\uff0c\u4f7f\u5f97\u6761\u4ef6\u2460\u548c\u2461\u6210\u7acb","title":"\u5206\u6790\uff1a"},{"location":"4.%20%E5%AF%BB%E6%89%BE%E4%B8%A4%E4%B8%AA%E6%AD%A3%E5%BA%8F%E6%95%B0%E7%BB%84%E7%9A%84%E4%B8%AD%E4%BD%8D%E6%95%B0/#_2","text":"\u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(log(min(m,n))) \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1) public class Solution { public double findMedianSortedArrays(int[] nums1, int[] nums2) { // \u4e3a\u4e86\u8ba9\u641c\u7d22\u8303\u56f4\u66f4\u5c0f\uff0c\u6211\u4eec\u59cb\u7ec8\u8ba9 num1 \u662f\u90a3\u4e2a\u66f4\u77ed\u7684\u6570\u7ec4 if (nums1.length > nums2.length) { int[] temp = nums1; nums1 = nums2; nums2 = temp; } // \u4e0a\u8ff0\u4ea4\u6362\u4fdd\u8bc1\u4e86 m <= n\uff0c\u5728\u66f4\u77ed\u7684\u533a\u95f4 [0, m] \u4e2d\u641c\u7d22\uff0c\u4f1a\u66f4\u5feb\u4e00\u4e9b int m = nums1.length; int n = nums2.length; // \u4f7f\u7528\u4e8c\u5206\u67e5\u627e\u5728\u533a\u95f4 [left, right] \u4e2d\u5bfb\u627e\u7d22\u5f15 i\uff0c\u4f7f\u5f97\u6761\u4ef6\u2460\u548c\u2461\u6210\u7acb int left = 0; int right = m; // size(\u5de6)\uff0c\u53ef\u901a\u8fc7\u8be5\u6570\u6c42\u5f97 j = totalLeft - i; int totalLeft = (m + n + 1) >>> 1; while (left < right) { // \u4e0b\u9762\u7684 if \u4e2d\u5de6\u6307\u9488\u53f3\u79fb\uff0c\u6545\u800c\u9700\u8981\u5411\u4e0b\u53d6\u6574 int i = (left + right) >>> 1; int j = totalLeft - i; // nums2 \u5de6\u8fb9\u7684\u6700\u5927\u503c\u6bd4 nums1 \u53f3\u8fb9\u7684\u6700\u5c0f\u503c\u8981\u5927\uff0c\u8bf4\u660e i \u9700\u8981\u6269\u5927 if (nums2[j - 1] > nums1[i]) { left = i + 1; } else { // \u5de6\u8fb9\u7684\u6700\u5927\u503c\u5c0f\u4e8e\u7b49\u4e8e nums1 \u53f3\u8fb9\u7684\u6700\u5c0f\u503c\uff0c\u56e0\u6b64 i \u4e0d\u9700\u8981\u6269\u5927 right = i; } } // \u9000\u51fa\u5faa\u73af\u65f6\u7684 i = (left = right) \u5373\u4e3a\u6ee1\u8db3\u6761\u4ef6\u2460\u548c\u2461\u7684 i int i = left; int j = totalLeft - i; // \u8fb9\u754c\u60c5\u51b5\u9700\u8981\u7279\u6b8a\u8003\u8651 int nums1LeftMax = (i == 0) ? Integer.MIN_VALUE : nums1[i - 1]; int nums1RightMin = (i == m) ? Integer.MAX_VALUE : nums1[i]; int nums2LeftMax = (j == 0) ? Integer.MIN_VALUE : nums2[j - 1]; int nums2RightMin = (j == n) ? Integer.MAX_VALUE : nums2[j]; return (((m + n) & 1) == 1) ? Math.max(nums1LeftMax, nums2LeftMax) : (double) (Math.max(nums1LeftMax, nums2LeftMax) + Math.min(nums1RightMin, nums2RightMin)) / 2; } }","title":"\u4e8c\u5206\u67e5\u627e\uff1a\u5728\u5faa\u73af\u4f53\u5185\u90e8\u6392\u9664\u5143\u7d20"},{"location":"5.%20%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E5%AD%90%E4%B8%B2/","text":"5. \u6700\u957f\u56de\u6587\u5b50\u4e32 \u94fe\u63a5 \u9898\u76ee\u63cf\u8ff0 \u7ed9\u4f60\u4e00\u4e2a\u5b57\u7b26\u4e32 s \uff0c\u627e\u5230 s \u4e2d\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\u3002 \u793a\u4f8b 1\uff1a \u8f93\u5165\uff1a s = \"babad\" \u8f93\u51fa\uff1a \"bab\" \u89e3\u91ca\uff1a \"aba\" \u540c\u6837\u662f\u7b26\u5408\u9898\u610f\u7684\u7b54\u6848\u3002 \u793a\u4f8b 2\uff1a \u8f93\u5165\uff1a s = \"cbbd\" \u8f93\u51fa\uff1a \"bb\" \u63d0\u793a\uff1a 1 <= s.length <= 1000 s \u4ec5\u7531\u6570\u5b57\u548c\u82f1\u6587\u5b57\u6bcd\u7ec4\u6210 Manacher \u7b97\u6cd5 \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n) \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n) public class Solution { public String longestPalindrome(String s) { // \u7531\u4e8e s.charAt(i) \u64cd\u4f5c\u4f1a\u53bb\u68c0\u67e5\u4e0b\u6807\u662f\u5426\u8d8a\u754c\uff0c\u56e0\u6b64 // \u5728 Java \u91cc\uff0c\u5c06\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u5b57\u7b26\u6570\u7ec4\u662f\u5e38\u89c1\u7684\u64cd\u4f5c char[] chars = s.toCharArray(); // \u6dfb\u52a0\u7279\u6b8a\u5b57\u7b26 '#' \u7684\u5b57\u7b26\u6570\u7ec4 char[] res = new char[(s.length() << 1) + 1]; for (int i = 0; i < res.length; i++) { res[i] = ((i & 1) == 0) ? '#' : chars[i >> 1]; } // \u81c2\u957f\uff1a\u8868\u793a\u4e2d\u5fc3\u6269\u5c55\u7b97\u6cd5\u5411\u5916\u6269\u5c55\u7684\u957f\u5ea6\u3002 // \u5982\u679c\u4e00\u4e2a\u4f4d\u7f6e\u7684\u6700\u5927\u56de\u6587\u5b57\u7b26\u4e32\u957f\u5ea6\u4e3a 2 * length + 1 \uff0c\u5176\u81c2\u957f\u4e3a length\u3002 // p[i] \u8868\u793a\u4ee5 res[i] \u4e3a\u4e2d\u5fc3\u7684\u81c2\u957f int[] p = new int[res.length]; // \u67d0\u4e2a\u6700\u5927\u56de\u6587\u5b57\u7b26\u4e32\u5ef6\u4f38\u5230\u7684\u6700\u53f3\u8fb9\u4e0b\u6807 int maxRight = 0; // maxRight \u6240\u5c5e\u56de\u6587\u4e32\u4e2d\u5fc3\u4e0b\u6807 int maxCenter = 0; // \u8bb0\u5f55\u904d\u5386\u8fc7\u7684\u6700\u5927\u56de\u6587\u5b57\u7b26\u4e32\u4e2d\u5fc3\u4e0b\u6807 int resCenter = 0; // \u8bb0\u5f55\u904d\u5386\u8fc7\u7684\u6700\u5927\u81c2\u957f int resLen = 0; for (int i = 0; i < res.length; i++) { if (i < maxRight) { int j = (maxCenter << 1) - i; // \u60c5\u51b5\u4e00\uff1aj \u7684\u81c2\u957f\u6ca1\u6709\u8d85\u51fa\u8303\u56f4 [maxLeft, maxRight]\uff0c\u76f4\u63a5\u8ba9 p[i] = p[j] if (p[j] < maxRight - i) { p[i] = p[j]; } else { // \u60c5\u51b5\u4e8c\uff1aj \u7684\u81c2\u957f\u5df2\u7ecf\u8d85\u51fa\u4e86\u8303\u56f4 [maxLeft, maxRight]\uff0c // \u6211\u4eec\u53ea\u80fd\u786e\u5b9a p[i] \u7684\u6700\u5c0f\u503c\u662f maxRight - i p[i] = maxRight - i; p[i] = expand(res, i - p[i], i + p[i]); } } else { // \u60c5\u51b5\u4e09\uff1ai \u8d85\u51fa\u4e86\u8303\u56f4 [maxLeft, maxRight]\uff0c\u6ca1\u6cd5\u5229\u7528\u4e4b\u524d\u7684\u5df2\u77e5\u6570\u636e p[i] = expand(res, i, i); } // \u5982\u679c\u53f3\u8fb9\u754c i + p[i] \u8d85\u8fc7 maxRight\uff0c\u90a3\u4e48\u5c31\u66f4\u65b0 maxRight \u548c maxCenter if (i + p[i] > maxRight) { maxRight = i + p[i]; maxCenter = i; } // \u8bb0\u5f55\u6700\u957f\u56de\u6587\u4e32\u7684\u534a\u5f84\u548c\u4e2d\u5fc3\u4f4d\u7f6e if (p[i] > resLen) { resLen = p[i]; resCenter = i; } } // \u8ba1\u7b97\u6700\u957f\u56de\u6587\u4e32\u7684\u957f\u5ea6\u548c\u5f00\u59cb\u7684\u4f4d\u7f6e int start = (resCenter - resLen) >> 1; // \u622a\u53d6\u6700\u957f\u56de\u6587\u5b50\u4e32 return s.substring(start, start + resLen); } private int expand(char[] res, int left, int right) { do { left--; right++; } while (left >= 0 && right < res.length && res[left] == res[right]); return (right - left - 2) >>> 1; } }","title":"5. \u6700\u957f\u56de\u6587\u5b50\u4e32"},{"location":"5.%20%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E5%AD%90%E4%B8%B2/#5","text":"\u94fe\u63a5","title":"5. \u6700\u957f\u56de\u6587\u5b50\u4e32"},{"location":"5.%20%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E5%AD%90%E4%B8%B2/#_1","text":"\u7ed9\u4f60\u4e00\u4e2a\u5b57\u7b26\u4e32 s \uff0c\u627e\u5230 s \u4e2d\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\u3002 \u793a\u4f8b 1\uff1a \u8f93\u5165\uff1a s = \"babad\" \u8f93\u51fa\uff1a \"bab\" \u89e3\u91ca\uff1a \"aba\" \u540c\u6837\u662f\u7b26\u5408\u9898\u610f\u7684\u7b54\u6848\u3002 \u793a\u4f8b 2\uff1a \u8f93\u5165\uff1a s = \"cbbd\" \u8f93\u51fa\uff1a \"bb\" \u63d0\u793a\uff1a 1 <= s.length <= 1000 s \u4ec5\u7531\u6570\u5b57\u548c\u82f1\u6587\u5b57\u6bcd\u7ec4\u6210","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"5.%20%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E5%AD%90%E4%B8%B2/#manacher","text":"\u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n) \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n) public class Solution { public String longestPalindrome(String s) { // \u7531\u4e8e s.charAt(i) \u64cd\u4f5c\u4f1a\u53bb\u68c0\u67e5\u4e0b\u6807\u662f\u5426\u8d8a\u754c\uff0c\u56e0\u6b64 // \u5728 Java \u91cc\uff0c\u5c06\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u5b57\u7b26\u6570\u7ec4\u662f\u5e38\u89c1\u7684\u64cd\u4f5c char[] chars = s.toCharArray(); // \u6dfb\u52a0\u7279\u6b8a\u5b57\u7b26 '#' \u7684\u5b57\u7b26\u6570\u7ec4 char[] res = new char[(s.length() << 1) + 1]; for (int i = 0; i < res.length; i++) { res[i] = ((i & 1) == 0) ? '#' : chars[i >> 1]; } // \u81c2\u957f\uff1a\u8868\u793a\u4e2d\u5fc3\u6269\u5c55\u7b97\u6cd5\u5411\u5916\u6269\u5c55\u7684\u957f\u5ea6\u3002 // \u5982\u679c\u4e00\u4e2a\u4f4d\u7f6e\u7684\u6700\u5927\u56de\u6587\u5b57\u7b26\u4e32\u957f\u5ea6\u4e3a 2 * length + 1 \uff0c\u5176\u81c2\u957f\u4e3a length\u3002 // p[i] \u8868\u793a\u4ee5 res[i] \u4e3a\u4e2d\u5fc3\u7684\u81c2\u957f int[] p = new int[res.length]; // \u67d0\u4e2a\u6700\u5927\u56de\u6587\u5b57\u7b26\u4e32\u5ef6\u4f38\u5230\u7684\u6700\u53f3\u8fb9\u4e0b\u6807 int maxRight = 0; // maxRight \u6240\u5c5e\u56de\u6587\u4e32\u4e2d\u5fc3\u4e0b\u6807 int maxCenter = 0; // \u8bb0\u5f55\u904d\u5386\u8fc7\u7684\u6700\u5927\u56de\u6587\u5b57\u7b26\u4e32\u4e2d\u5fc3\u4e0b\u6807 int resCenter = 0; // \u8bb0\u5f55\u904d\u5386\u8fc7\u7684\u6700\u5927\u81c2\u957f int resLen = 0; for (int i = 0; i < res.length; i++) { if (i < maxRight) { int j = (maxCenter << 1) - i; // \u60c5\u51b5\u4e00\uff1aj \u7684\u81c2\u957f\u6ca1\u6709\u8d85\u51fa\u8303\u56f4 [maxLeft, maxRight]\uff0c\u76f4\u63a5\u8ba9 p[i] = p[j] if (p[j] < maxRight - i) { p[i] = p[j]; } else { // \u60c5\u51b5\u4e8c\uff1aj \u7684\u81c2\u957f\u5df2\u7ecf\u8d85\u51fa\u4e86\u8303\u56f4 [maxLeft, maxRight]\uff0c // \u6211\u4eec\u53ea\u80fd\u786e\u5b9a p[i] \u7684\u6700\u5c0f\u503c\u662f maxRight - i p[i] = maxRight - i; p[i] = expand(res, i - p[i], i + p[i]); } } else { // \u60c5\u51b5\u4e09\uff1ai \u8d85\u51fa\u4e86\u8303\u56f4 [maxLeft, maxRight]\uff0c\u6ca1\u6cd5\u5229\u7528\u4e4b\u524d\u7684\u5df2\u77e5\u6570\u636e p[i] = expand(res, i, i); } // \u5982\u679c\u53f3\u8fb9\u754c i + p[i] \u8d85\u8fc7 maxRight\uff0c\u90a3\u4e48\u5c31\u66f4\u65b0 maxRight \u548c maxCenter if (i + p[i] > maxRight) { maxRight = i + p[i]; maxCenter = i; } // \u8bb0\u5f55\u6700\u957f\u56de\u6587\u4e32\u7684\u534a\u5f84\u548c\u4e2d\u5fc3\u4f4d\u7f6e if (p[i] > resLen) { resLen = p[i]; resCenter = i; } } // \u8ba1\u7b97\u6700\u957f\u56de\u6587\u4e32\u7684\u957f\u5ea6\u548c\u5f00\u59cb\u7684\u4f4d\u7f6e int start = (resCenter - resLen) >> 1; // \u622a\u53d6\u6700\u957f\u56de\u6587\u5b50\u4e32 return s.substring(start, start + resLen); } private int expand(char[] res, int left, int right) { do { left--; right++; } while (left >= 0 && right < res.length && res[left] == res[right]); return (right - left - 2) >>> 1; } }","title":"Manacher \u7b97\u6cd5"}]}